/**
******************************************************************************
* NOTE : Generated by cppgen. It is NOT supposed to modify this file.
*****************************************************************************/
#ifndef __sync_conf_20160602160757_h__
#define __sync_conf_20160602160757_h__

#include "json_serialization.h"

namespace jos_lib
{
    struct NetworkConf
    {
        int port;
        int backlog;
        bool enable_reuseport;
        bool enable_nodelay;
        bool enable_defer_accept;
        int max_body_size;
        int max_keepalive_requests;
        int recv_timeout;
        int send_timeout;
        int threads;
        std::string user;
        std::string passwd;
        std::string access_allow;
        bool json_has_port;
        bool json_has_backlog;
        bool json_has_enable_reuseport;
        bool json_has_enable_nodelay;
        bool json_has_enable_defer_accept;
        bool json_has_max_body_size;
        bool json_has_max_keepalive_requests;
        bool json_has_recv_timeout;
        bool json_has_send_timeout;
        bool json_has_threads;
        bool json_has_user;
        bool json_has_passwd;
        bool json_has_access_allow;
        NetworkConf();
        bool operator==(const NetworkConf& obj) const;
    };
}

namespace jos_lib
{
    bool Serialize(const jos_lib::NetworkConf& obj_val, jos_lib::Allocator& alloc, rapidjson::Value& json_val);
    bool Deserialize(const rapidjson::Value& json_val, jos_lib::NetworkConf& obj_val);
}

namespace jos_lib
{
    struct SyncConf
    {
        bool daemon;
        std::string logs_path;
        std::string ngx_path;
        std::string auth_path;
        int threads;
        int release_interval;
        int checkdb_interval;
        int checklog_interval;
        bool json_has_daemon;
        bool json_has_logs_path;
        bool json_has_ngx_path;
        bool json_has_auth_path;
        bool json_has_threads;
        bool json_has_release_interval;
        bool json_has_checkdb_interval;
        bool json_has_checklog_interval;
        SyncConf();
        bool operator==(const SyncConf& obj) const;
    };
}

namespace jos_lib
{
    bool Serialize(const jos_lib::SyncConf& obj_val, jos_lib::Allocator& alloc, rapidjson::Value& json_val);
    bool Deserialize(const rapidjson::Value& json_val, jos_lib::SyncConf& obj_val);
}

namespace jos_lib
{
    struct SyncServerConf
    {
        NetworkConf network;
        SyncConf sync;
        bool json_has_network;
        bool json_has_sync;
        SyncServerConf();
        bool operator==(const SyncServerConf& obj) const;
    };
}

namespace jos_lib
{
    bool Serialize(const jos_lib::SyncServerConf& obj_val, jos_lib::Allocator& alloc, rapidjson::Value& json_val);
    bool Deserialize(const rapidjson::Value& json_val, jos_lib::SyncServerConf& obj_val);
}

#endif // __sync_conf_20160602160757_h__