/**
******************************************************************************
* NOTE : Generated by cppgen. It is NOT supposed to modify this file.
*****************************************************************************/
#include "sync_status.h"

namespace jos_lib
{
    Status::Status()
    {
        // fields from jos_lib::Status
        json_has_total_status = false;
        json_has_status = false;
    }

    bool Status::operator==(const Status& obj) const
    {
        // fields from jos_lib::Status
        if (!(total_status == obj.total_status)) return false;
        if (!(status == obj.status)) return false;

        return true;
    }

} // jos_lib

namespace jos_lib
{

    /*
    * generate from "sync_status.json": "jos_lib::Status"
    */
    bool Serialize(const jos_lib::Status& obj_val, jos_lib::Allocator& alloc, rapidjson::Value& json_val)
    {
        do
        {
            json_val.SetObject();
            // fields from "jos_lib::Status"
            if (!Serialize(obj_val.total_status, "total_status", alloc, json_val)) break; // @(field_type : std::map<std::string, int>)
            if (!Serialize(obj_val.status, "status", alloc, json_val)) break; // @(field_type : std::map<std::string, std::map<std::string, int> >)

            return true;
        } while (0);

        return false;
    }

    bool Deserialize(const rapidjson::Value& json_val, jos_lib::Status& obj_val)
    {
        do
        {
            // fields from "jos_lib::Status"
            if (!Deserialize(json_val, "total_status", obj_val.total_status, obj_val.json_has_total_status)) break; // @(field_type : std::map<std::string, int>)
            if (!Deserialize(json_val, "status", obj_val.status, obj_val.json_has_status)) break; // @(field_type : std::map<std::string, std::map<std::string, int> >)

            return true;
        } while (0);

        return false;
    }

} // jos_lib