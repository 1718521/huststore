////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by libevhtp.py. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#include "hustdb_handler_frame.h"

void hustdb_exist_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_exist_ctx_t args(request->uri->query);
    if (!args.has_key)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_exist_handler(args, request, ctx);
}

void hustdb_get_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_get_ctx_t args(request->uri->query);
    if (!args.has_key)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_get_handler(args, request, ctx);
}

void hustdb_put_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method && htp_method_POST != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_put_ctx_t args(request->uri->query);
    evhtp::c_str_t body = ctx->base.get_body(request);
    if (htp_method_POST == method)
    {
        if (!body.data || body.len < 1)
        {
            evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
            return;
        }
    }
    if (body.data && body.len > 0)
    {
        args.has_val = true;
        args.val = body;
    }
    if (!args.has_key || !args.has_val)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_put_handler(args, request, ctx);
}

void hustdb_del_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_del_ctx_t args(request->uri->query);
    if (!args.has_key)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_del_handler(args, request, ctx);
}

void hustdb_keys_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_keys_ctx_t args(request->uri->query);
    if (!args.has_offset || !args.has_size || !args.has_file)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_keys_handler(args, request, ctx);
}

void hustdb_stat_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_stat_ctx_t args(request->uri->query);
    hustdb_stat_handler(args, request, ctx);
}

void hustdb_stat_all_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_stat_all_handler(request, ctx);
}

void hustdb_hexist_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_hexist_ctx_t args(request->uri->query);
    if (!args.has_tb || !args.has_key)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_hexist_handler(args, request, ctx);
}

void hustdb_hget_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_hget_ctx_t args(request->uri->query);
    if (!args.has_tb || !args.has_key)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_hget_handler(args, request, ctx);
}

void hustdb_hset_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method && htp_method_POST != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_hset_ctx_t args(request->uri->query);
    evhtp::c_str_t body = ctx->base.get_body(request);
    if (htp_method_POST == method)
    {
        if (!body.data || body.len < 1)
        {
            evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
            return;
        }
    }
    if (body.data && body.len > 0)
    {
        args.has_val = true;
        args.val = body;
    }
    if (!args.has_tb || !args.has_key || !args.has_val)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_hset_handler(args, request, ctx);
}

void hustdb_hdel_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_hdel_ctx_t args(request->uri->query);
    if (!args.has_tb || !args.has_key)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_hdel_handler(args, request, ctx);
}

void hustdb_hkeys_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_hkeys_ctx_t args(request->uri->query);
    if (!args.has_tb || !args.has_offset || !args.has_size)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_hkeys_handler(args, request, ctx);
}

void hustdb_sismember_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method && htp_method_POST != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_sismember_ctx_t args(request->uri->query);
    evhtp::c_str_t body = ctx->base.get_body(request);
    if (htp_method_POST == method)
    {
        if (!body.data || body.len < 1)
        {
            evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
            return;
        }
    }
    if (body.data && body.len > 0)
    {
        args.has_key = true;
        args.key = body;
    }
    if (!args.has_tb || !args.has_key)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_sismember_handler(args, request, ctx);
}

void hustdb_sadd_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method && htp_method_POST != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_sadd_ctx_t args(request->uri->query);
    evhtp::c_str_t body = ctx->base.get_body(request);
    if (htp_method_POST == method)
    {
        if (!body.data || body.len < 1)
        {
            evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
            return;
        }
    }
    if (body.data && body.len > 0)
    {
        args.has_key = true;
        args.key = body;
    }
    if (!args.has_tb || !args.has_key)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_sadd_handler(args, request, ctx);
}

void hustdb_srem_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method && htp_method_POST != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_srem_ctx_t args(request->uri->query);
    evhtp::c_str_t body = ctx->base.get_body(request);
    if (htp_method_POST == method)
    {
        if (!body.data || body.len < 1)
        {
            evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
            return;
        }
    }
    if (body.data && body.len > 0)
    {
        args.has_key = true;
        args.key = body;
    }
    if (!args.has_tb || !args.has_key)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_srem_handler(args, request, ctx);
}

void hustdb_smembers_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_smembers_ctx_t args(request->uri->query);
    if (!args.has_tb || !args.has_offset || !args.has_size)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_smembers_handler(args, request, ctx);
}

void hustdb_file_count_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_file_count_handler(request, ctx);
}

void hustdb_export_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_export_ctx_t args(request->uri->query);
    if (!args.has_tb && !args.has_file)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_export_handler(args, request, ctx);
}

void hustmq_put_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method && htp_method_POST != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustmq_put_ctx_t args(request->uri->query);
    evhtp::c_str_t body = ctx->base.get_body(request);
    if (htp_method_POST == method)
    {
        if (!body.data || body.len < 1)
        {
            evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
            return;
        }
    }
    if (body.data && body.len > 0)
    {
        args.has_item = true;
        args.item = body;
    }
    if (!args.has_queue || !args.has_item)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustmq_put_handler(args, request, ctx);
}

void hustmq_get_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustmq_get_ctx_t args(request->uri->query);
    if (!args.has_queue || !args.has_worker)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustmq_get_handler(args, request, ctx);
}

void hustmq_ack_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustmq_ack_ctx_t args(request->uri->query);
    if (!args.has_queue || !args.has_token)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustmq_ack_handler(args, request, ctx);
}

void hustmq_timeout_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustmq_timeout_ctx_t args(request->uri->query);
    if (!args.has_queue || !args.has_minute)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustmq_timeout_handler(args, request, ctx);
}

void hustmq_worker_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustmq_worker_ctx_t args(request->uri->query);
    if (!args.has_queue)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustmq_worker_handler(args, request, ctx);
}

void hustmq_stat_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustmq_stat_ctx_t args(request->uri->query);
    if (!args.has_queue)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustmq_stat_handler(args, request, ctx);
}

void hustmq_stat_all_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustmq_stat_all_handler(request, ctx);
}

void hustmq_max_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustmq_max_ctx_t args(request->uri->query);
    if (!args.has_queue || !args.has_num)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustmq_max_handler(args, request, ctx);
}

void hustmq_lock_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustmq_lock_ctx_t args(request->uri->query);
    if (!args.has_queue || !args.has_on)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustmq_lock_handler(args, request, ctx);
}

void hustmq_purge_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustmq_purge_ctx_t args(request->uri->query);
    if (!args.has_queue || !args.has_priori)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustmq_purge_handler(args, request, ctx);
}

void hustmq_pub_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method && htp_method_POST != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustmq_pub_ctx_t args(request->uri->query);
    evhtp::c_str_t body = ctx->base.get_body(request);
    if (htp_method_POST == method)
    {
        if (!body.data || body.len < 1)
        {
            evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
            return;
        }
    }
    if (body.data && body.len > 0)
    {
        args.has_item = true;
        args.item = body;
    }
    if (!args.has_queue || !args.has_item)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustmq_pub_handler(args, request, ctx);
}

void hustmq_sub_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method && htp_method_POST != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustmq_sub_ctx_t args(request->uri->query);
    if (!args.has_queue || !args.has_idx)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustmq_sub_handler(args, request, ctx);
}

void hustdb_info_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_info_handler(request, ctx);
}

void hustdb_task_info_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_task_info_handler(request, ctx);
}

void hustdb_task_status_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_task_status_ctx_t args(request->uri->query);
    if (!args.has_token)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_task_status_handler(args, request, ctx);
}

void hustdb_zismember_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method && htp_method_POST != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_zismember_ctx_t args(request->uri->query);
    evhtp::c_str_t body = ctx->base.get_body(request);
    if (htp_method_POST == method)
    {
        if (!body.data || body.len < 1)
        {
            evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
            return;
        }
    }
    if (body.data && body.len > 0)
    {
        args.has_key = true;
        args.key = body;
    }
    if (!args.has_tb || !args.has_key)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_zismember_handler(args, request, ctx);
}

void hustdb_zscore_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method && htp_method_POST != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_zscore_ctx_t args(request->uri->query);
    evhtp::c_str_t body = ctx->base.get_body(request);
    if (htp_method_POST == method)
    {
        if (!body.data || body.len < 1)
        {
            evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
            return;
        }
    }
    if (body.data && body.len > 0)
    {
        args.has_key = true;
        args.key = body;
    }
    if (!args.has_tb || !args.has_key)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_zscore_handler(args, request, ctx);
}

void hustdb_zadd_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method && htp_method_POST != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_zadd_ctx_t args(request->uri->query);
    evhtp::c_str_t body = ctx->base.get_body(request);
    if (htp_method_POST == method)
    {
        if (!body.data || body.len < 1)
        {
            evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
            return;
        }
    }
    if (body.data && body.len > 0)
    {
        args.has_key = true;
        args.key = body;
    }
    if (!args.has_tb || !args.has_score || !args.has_key)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_zadd_handler(args, request, ctx);
}

void hustdb_zrem_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method && htp_method_POST != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_zrem_ctx_t args(request->uri->query);
    evhtp::c_str_t body = ctx->base.get_body(request);
    if (htp_method_POST == method)
    {
        if (!body.data || body.len < 1)
        {
            evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
            return;
        }
    }
    if (body.data && body.len > 0)
    {
        args.has_key = true;
        args.key = body;
    }
    if (!args.has_tb || !args.has_key)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_zrem_handler(args, request, ctx);
}

void hustdb_zrangebyrank_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_zrangebyrank_ctx_t args(request->uri->query);
    if (!args.has_tb || !args.has_offset || !args.has_size)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_zrangebyrank_handler(args, request, ctx);
}

void hustdb_zrangebyscore_frame(evhtp_request_t * request, void * data)
{
    hustdb_network_ctx_t * ctx = reinterpret_cast<hustdb_network_ctx_t *>(data);
    if (!request || !ctx || !ctx->db->ok())
    {
        evhtp::send_reply(EVHTP_RES_500, request);
        return;
    }
    if (!evhtp::check_auth(request, &ctx->base))
    {
        return;
    }
    htp_method method = evhtp_request_get_method(request);
    if (htp_method_GET != method)
    {
        evhtp::invalid_method(request);
        return;
    }
    hustdb_zrangebyscore_ctx_t args(request->uri->query);
    if (!args.has_tb || !args.has_offset || !args.has_size)
    {
        evhtp::send_reply(EVHTP_RES_NOTFOUND, request);
        return;
    }
    hustdb_zrangebyscore_handler(args, request, ctx);
}

bool hustdb_init_handlers(hustdb_network_ctx_t * ctx, evhtp_t * htp)
{
    if (!evhtp_set_cb(htp, "/hustdb/exist", hustdb_exist_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/get", hustdb_get_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/put", hustdb_put_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/del", hustdb_del_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/keys", hustdb_keys_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/stat", hustdb_stat_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/stat_all", hustdb_stat_all_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/hexist", hustdb_hexist_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/hget", hustdb_hget_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/hset", hustdb_hset_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/hdel", hustdb_hdel_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/hkeys", hustdb_hkeys_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/sismember", hustdb_sismember_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/sadd", hustdb_sadd_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/srem", hustdb_srem_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/smembers", hustdb_smembers_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/file_count", hustdb_file_count_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/export", hustdb_export_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustmq/put", hustmq_put_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustmq/get", hustmq_get_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustmq/ack", hustmq_ack_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustmq/timeout", hustmq_timeout_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustmq/worker", hustmq_worker_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustmq/stat", hustmq_stat_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustmq/stat_all", hustmq_stat_all_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustmq/max", hustmq_max_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustmq/lock", hustmq_lock_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustmq/purge", hustmq_purge_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustmq/pub", hustmq_pub_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustmq/sub", hustmq_sub_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/info", hustdb_info_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/task_info", hustdb_task_info_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/task_status", hustdb_task_status_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/zismember", hustdb_zismember_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/zscore", hustdb_zscore_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/zadd", hustdb_zadd_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/zrem", hustdb_zrem_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/zrangebyrank", hustdb_zrangebyrank_frame, ctx)) return false;
    if (!evhtp_set_cb(htp, "/hustdb/zrangebyscore", hustdb_zrangebyscore_frame, ctx)) return false;

    return true;
}